// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	// instruction[n]: 0:j3, 1:j2, 2:j1, 3:d3,  4:d2, 5:d1, 6:c6, 7:c5, 8:c4, 9:c3, 10:c2, 11:c1, 12:a
	
	Not (in=instruction[15], out=isA);   // A instruction
	Not (in=isA, out=isC);   // C instruction
	
	And (a=instruction[5], b=isC, out=writeA);  // if is C instruction and write to A Register
	Or (a=isA, b=writeA, out=isAorWriteA);     // if it is writeA or isA
	
	Mux16 (a=instruction, b=ALUout, sel=writeA, out=ARegisterIn);  // specify the input of ARegister
	
	ARegister (in=ARegisterIn, load=isAorWriteA, out=ARegisterOut, out[0..14]=addressM);   // output of ARegister
	
	And (a=isC, b=instruction[12], out=writeMem);		// is A or M being computed
	Mux16 (a=ARegisterOut, b=inM, sel=writeMem, out=AorM);      	// specify A or M
	
	And (a=isC, b=instruction[4], out=writeD);		// is D being written
	DRegister (in=ALUout, load=writeD, out=DRegisterOut); 		// output of DRegister
	
	ALU (x=DRegisterOut, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=outM, out=ALUout);
	
	Not (in=ng, out=ngNot);			// Not negative
	Not (in=zr, out=zrNot);			// Not Zero
	And (a=ngNot, b=zrNot, out=pos);  // positive
	
	And(a=pos, b=instruction[0], out=JGT);
    And(a=zr, b=instruction[1], out=JEQ);
    And(a=ng, b=instruction[2], out=JLT);
	
	Or (a=JGT, b=JEQ, out=JGE);
	Or (a=JGE, b=JLT, out=JMP);
	And (a=isC, b=JMP, out=isJMP);
	
	PC (in=ARegisterOut, reset=reset, load=isJMP, inc=true, out[0..14]=pc);
	And (a=isC, b=instruction[3], out=writeM);    // write M?

}